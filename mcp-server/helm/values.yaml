# Default values for MCP Server Phase 6-3
# Production-ready Helm values

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: "gp3-ssd"

# MCP Server configuration
mcpServer:
  # Docker image configuration
  image:
    registry: docker.io
    repository: mcp-server
    tag: "phase6-3"
    pullPolicy: Always
    
  # Deployment configuration
  replicaCount: 3
  
  # Service configuration
  service:
    type: ClusterIP
    port: 8003
    targetPort: 8003
    annotations: {}
    
  # Ingress configuration
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/rate-limit-connections: "20"
      nginx.ingress.kubernetes.io/rate-limit-requests-per-second: "10"
    hosts:
      - host: mcp.yourdomain.com
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: mcp-server-tls
        hosts:
          - mcp.yourdomain.com
          
  # Resource limits
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
      
  # Autoscaling
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
    
  # Security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop:
        - ALL
        
  # Probes
  livenessProbe:
    httpGet:
      path: /mcp/system/health
      port: 8003
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    
  readinessProbe:
    httpGet:
      path: /mcp/system/health
      port: 8003
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
    
  # Environment variables
  env:
    ENVIRONMENT: "production"
    LOG_LEVEL: "INFO"
    DEBUG: "false"
    ENABLE_MONITORING: "true"
    ENABLE_AUDIT_LOGGING: "true"
    MONITORING_INTERVAL: "30"
    WORKERS: "4"
    
  # Persistent storage
  persistence:
    enabled: true
    storageClass: "gp3-ssd"
    accessModes:
      - ReadWriteOnce
    size: 10Gi
    
  # Node selector
  nodeSelector: {}
  
  # Tolerations
  tolerations: []
  
  # Affinity
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: app
                  operator: In
                  values:
                    - mcp-server
            topologyKey: kubernetes.io/hostname

# Redis configuration
redis:
  enabled: true
  
  # Redis specific configuration
  auth:
    enabled: true
    password: "redispassword1234567890"
    
  architecture: standalone
  
  master:
    persistence:
      enabled: true
      storageClass: "gp3-ssd"
      size: 5Gi
      
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

# Prometheus configuration
prometheus:
  enabled: true
  
  # Prometheus server configuration
  server:
    image:
      repository: prom/prometheus
      tag: latest
      
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 200m
        memory: 256Mi
        
    persistence:
      enabled: true
      storageClass: "gp3-ssd"
      size: 20Gi
      
    service:
      type: ClusterIP
      port: 9090
      
  # Prometheus configuration
  config:
    scrape_configs:
      - job_name: 'mcp-server'
        static_configs:
          - targets: ['mcp-server-service:8003']
        metrics_path: '/metrics'
        scrape_interval: 15s

# Grafana configuration
grafana:
  enabled: true
  
  # Grafana specific configuration
  admin:
    user: admin
    password: "grafanaadmin1234567890"
    
  image:
    repository: grafana/grafana
    tag: latest
    
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
      
  persistence:
    enabled: true
    storageClass: "gp3-ssd"
    size: 2Gi
    
  service:
    type: ClusterIP
    port: 3000
    
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
    hosts:
      - grafana.mcp.yourdomain.com
    tls:
      - secretName: grafana-tls
        hosts:
          - grafana.mcp.yourdomain.com

# ServiceAccount configuration
serviceAccount:
  create: true
  name: "mcp-server"
  annotations: {}

# RBAC configuration
rbac:
  create: true
  
# Network policies
networkPolicy:
  enabled: true
  
# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1
  
# Monitoring and alerting
monitoring:
  enabled: true
  
  # ServiceMonitor for Prometheus Operator
  serviceMonitor:
    enabled: true
    namespace: monitoring
    interval: 30s
    path: /metrics
    
  # Grafana dashboards
  dashboards:
    enabled: true
    
  # Alerting rules
  alerting:
    enabled: true
    
# Security configuration
security:
  # Pod security policy
  podSecurityPolicy:
    enabled: true
    
  # Network security
  networkSecurity:
    enabled: true
    
  # TLS configuration
  tls:
    enabled: true
    
# Backup configuration
backup:
  enabled: false
  schedule: "0 2 * * *"
  retention: "30d"
  
# Configuration for secrets
secrets:
  # JWT secret (base64 encoded)
  jwtSecret: "Y2hhbmdlLW1lLXRvLWEtc3Ryb25nLXNlY3VyZS1qd3Qtc2VjcmV0LWZvci1wcm9kdWN0aW9uLWRlcGxveW1lbnQ="
  
  # User credentials
  adminUsername: "YWRtaW4="
  adminPassword: "YWRtaW4xMjM0NTY3ODkw"
  operatorUsername: "b3BlcmF0b3I="
  operatorPassword: "b3BlcmF0b3IxMjM0NTY3ODkw"
  readonlyUsername: "cmVhZG9ubHk="
  readonlyPassword: "cmVhZG9ubHkxMjM0NTY3ODkw"
  
  # Backend API key
  backendApiKey: "YmFja2VuZC1hcGkta2V5LWZvci1wcm9kdWN0aW9uLWRlcGxveW1lbnQ="