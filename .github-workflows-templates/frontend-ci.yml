# Frontend CI/CD Pipeline for MFG Drone System
# Copy this file to .github/workflows/frontend-ci.yml

name: Frontend CI/CD

on:
  push:
    branches: [main, develop]
    paths: ['frontend/**', '.github/workflows/frontend-ci.yml']
  pull_request:
    branches: [main]
    paths: ['frontend/**']

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: mfg-drone-frontend

jobs:
  # Quality checks and testing
  quality-checks:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    strategy:
      matrix:
        node-version: [18, 20]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Type checking
        run: npm run type-check

      - name: Lint check
        run: npm run lint

      - name: Security audit
        run: npm run security:audit
        continue-on-error: true

      - name: Run unit tests
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/coverage-final.json
          flags: frontend
          name: frontend-coverage

      - name: Bundle analysis
        if: matrix.node-version == '18'
        run: npm run build:analyze

      - name: Upload bundle analysis
        if: matrix.node-version == '18'
        uses: actions/upload-artifact@v3
        with:
          name: bundle-analysis
          path: frontend/dist/stats.html

  # E2E testing
  e2e-tests:
    runs-on: ubuntu-latest
    needs: quality-checks

    services:
      backend:
        image: python:3.11-slim
        ports:
          - 8000:8000
        options: >-
          --health-cmd "curl -f http://localhost:8000/health || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Setup backend for E2E tests
        working-directory: ./backend
        run: |
          pip install -r requirements.txt
          python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
          sleep 10

      - name: Install Playwright
        working-directory: ./frontend
        run: npx playwright install --with-deps

      - name: Run E2E tests
        working-directory: ./frontend
        run: npm run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: e2e-results
          path: |
            frontend/test-results/
            frontend/playwright-report/

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: quality-checks

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './frontend'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'mfg-drone-frontend'
          path: './frontend'
          format: 'HTML'
          args: >
            --enableRetired
            --enableExperimental
            --failOnCVSS 7

      - name: Upload OWASP results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: owasp-report
          path: reports/

  # Build and performance testing
  build-and-performance:
    runs-on: ubuntu-latest
    needs: quality-checks

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build production bundle
        working-directory: ./frontend
        run: npm run build:prod

      - name: Analyze bundle size
        working-directory: ./frontend
        run: |
          npm install -g bundlesize
          bundlesize

      - name: Performance budget check
        working-directory: ./frontend
        run: |
          # Check bundle sizes
          MAIN_BUNDLE_SIZE=$(stat -c%s dist/assets/index-*.js)
          VENDOR_BUNDLE_SIZE=$(stat -c%s dist/assets/vendor-*.js)
          
          # Fail if bundles are too large (main: 500KB, vendor: 1MB)
          if [ $MAIN_BUNDLE_SIZE -gt 512000 ]; then
            echo "Main bundle too large: $MAIN_BUNDLE_SIZE bytes"
            exit 1
          fi
          
          if [ $VENDOR_BUNDLE_SIZE -gt 1048576 ]; then
            echo "Vendor bundle too large: $VENDOR_BUNDLE_SIZE bytes"
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist/

  # Accessibility testing
  accessibility-test:
    runs-on: ubuntu-latest
    needs: build-and-performance

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install accessibility tools
        run: |
          npm install -g @axe-core/cli http-server

      - name: Start server
        working-directory: ./frontend
        run: |
          http-server dist -p 3000 &
          sleep 5

      - name: Run accessibility tests
        run: |
          axe http://localhost:3000 --exit --tags wcag2a,wcag2aa

  # Docker build and push
  docker-build:
    runs-on: ubuntu-latest
    needs: [quality-checks, security-scan, build-and-performance]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [docker-build, e2e-tests, accessibility-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment logic here
          # This could involve SSH to staging server, Kubernetes deployment, etc.

      - name: Run smoke tests
        run: |
          echo "Running smoke tests against staging..."
          # Add smoke test commands here

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Production deployment (manual approval required)
  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment logic here

      - name: Post-deployment verification
        run: |
          echo "Verifying production deployment..."
          # Add verification steps here

      - name: Update deployment status
        if: success()
        run: |
          echo "Production deployment successful!"

# Quality gates configuration
quality-gates:
  - name: "Code Coverage"
    threshold: 80
    metric: "line-coverage"
    
  - name: "Bundle Size"
    threshold: 1.5
    metric: "bundle-size-mb"
    
  - name: "Security Issues"
    threshold: 0
    metric: "high-severity-vulnerabilities"
    
  - name: "Performance Budget"
    threshold: 3000
    metric: "first-contentful-paint-ms"