# Docker Compose for MFG Drone Backend API
# Phase 5: Production-ready containerized deployment

version: '3.8'

services:
  # Main API Server
  mfg-drone-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: mfg-drone-api:latest
    container_name: mfg-drone-api
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - HOST=0.0.0.0
      - PORT=8000
      - LOG_LEVEL=INFO
      
      # Data Storage Paths
      - MFG_DATASETS_ROOT=/app/data/datasets
      - MFG_MODELS_ROOT=/app/data/models
      - MFG_LOGS_ROOT=/app/data/logs
      
      # ML Training Settings
      - DEFAULT_EPOCHS=100
      - DEFAULT_BATCH_SIZE=16
      - DEFAULT_LEARNING_RATE=0.001
      
      # WebSocket Settings
      - WS_HEARTBEAT_INTERVAL=1.0
      
      # Camera Settings
      - CAMERA_WIDTH=640
      - CAMERA_HEIGHT=480
      - CAMERA_FPS=30
      
      # Security Settings (use secure keys in production)
      - MFG_DRONE_ADMIN_KEY=mfg-drone-admin-key-2024
      - MFG_DRONE_READONLY_KEY=mfg-drone-readonly-2024
      - RATE_LIMIT_ENABLED=true
      - MAX_FAILED_ATTEMPTS=10
      
      # Redis Configuration (optional)
      - REDIS_URL=redis://redis:6379/0
      
    volumes:
      # Persistent data storage
      - datasets_data:/app/data/datasets
      - models_data:/app/data/models
      - logs_data:/app/data/logs
      
      # Configuration (optional)
      - ./config:/app/config:ro
      
    networks:
      - mfg-drone-network
    
    depends_on:
      - redis
    
    restart: unless-stopped
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: mfg-drone-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - mfg-drone-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: mfg-drone-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - logs_data:/var/log/nginx
    networks:
      - mfg-drone-network
    depends_on:
      - mfg-drone-api
    restart: unless-stopped
    profiles:
      - production

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: mfg-drone-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - mfg-drone-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: mfg-drone-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - mfg-drone-network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

# Named volumes for persistent data
volumes:
  datasets_data:
    driver: local
  models_data:
    driver: local
  logs_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Custom network
networks:
  mfg-drone-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16